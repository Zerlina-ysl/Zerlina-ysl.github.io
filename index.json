[{"content":" 以下是实习时的碎碎念，包括知道自己不能转正的失望沮丧、在北京一个人的孤单难过和对未来的一些迷茫，现在读起来很幼稚，但是不舍得删，之前在飞书文档里记录着，现在转载到这里\n关于面试10.28 遇到好的面试官/面试官问到好的问题，真的是感觉这几十分钟值得了，哪怕面试没过也值得了。好的问题就是思维的开阔，比如：微信抢红包案例，如果没有问到，我不会想着下来搜一搜，也不会想着了解一下，更不会坚定自己做一下秒杀的项目过一下场景。\n当然，如果没有遇到好的面试官也无所谓，毕竟有问题就会有答案，有答案就会有思考，有思考促进下一个新问题，找到了新不足。\n明天去接猫猫，买好了猫猫的所有东西，一个小橘子和长毛小三花，虽然小橘子很粘人，但是心里还是偏爱长毛三花，感觉有个猫猫陪伴真的会很不错吧，自己一个人呆着，没有奋斗的意义，给自己找不来意义，只有孤独、虚无、痛苦，我无法解脱，我只能在无意义的视频中麻痹自己。\n关于提问11.1 是和前端沟通的时候偶然发现“提问”这个门道的，先附上聊天截图。\n当时看到这么一段话，是没兴趣看下去的。就突然想起来自己刚实习的时候也是这样。大家都很忙，问问题讲话都要直接重点，而不是需要附带一大堆上下文，对于问题的主谓宾一定要讲清楚。\n等对方对问题细致解释的时候，再根据对方的疑惑点进行解答。\n其实还可以和我面试的时候联系在一起，记得深信服的老哥建议我面试的回答采用总分格式，先说重点，再详细解释。后来细细品味确实是有些道理的。\n关于定坤所提到的api工程师11.4 具体内容是在这篇文章，之前看过很多遍了，常看常新\n11.8 相信未来 这个世界会好吗？等通知吧。\n三面挂了，面试官说的蛮真诚，主要原因还是因为自己不够优秀，只是大致符合要求而已，没有闪光点。3分的话，就是大白菜的水平。昨天晚上很崩溃，今天也是，以后也是。接受现实，相信未来。\n那么该怎么做呢，在没有找到工作的这段日子？\n算法题需要保证。2天1题。星期天一天2题。可以适当增加\n业务能力需要有突出的地方，需要有闪光点。除了一些基础必备的八股，对于实习需求需要多上心。认真做，认真看，认真想，多总结，多反思，多思考。\n具体表现在：分析文档和总结复盘文档。出现问题一定要复盘，分析原因，思考如何做得更好。少私聊，少看群消息，少摸鱼，多干活，兢兢业业。\n在工作中，不能玻璃心，不要什么都说，只说好不说坏，想清楚再说，有疑惑立即问，自己的任务自己上心负责和测试。\n将已有的需求研究熟练。比如完结需求（这是唯一一个可以讲的需求，需要搞清楚kafka到底起了什么作用。即，思考一下kafka\n写完以上，发现自己已经做好了一直实习的打算，看来目前的计划还是需要长租起码到明年春招（5月前），这周需要挑一个时间和ld聊一聊，聊被劝退的可能性，没有写具体时间，是因为还没有战胜和ld聊天的恐惧，不知道如何开口，说些什么。\n11.15 突然的郁闷 顺丰开了6500，数字马力开了9000，不尽如人意，都是劝退价。\n今天下午的时候很郁闷，想做一个秒杀项目，却发现似乎无法吸引面试官注意，好像从最开始我的学历这一步就已经输了，我不知道怎么提高自己的代码能力，不知道怎么让面试官耳目一新，不知道怎么从基础良好跃步到进阶。\n我翻遍了谷歌，翻遍了飞书文档，试图从那些算得上是很出色的程序员的日记中找出什么，却发现他们都在谈思想谈方向，但是没人告诉我现在应该怎么做。考研吗？我又回到了起点。\n下午代码上线，我一直在揪着心，我怕出现error，我怕看见错误，那意味着我能力的低下，意味着我哪怕已经有四个月的实习经历还是要被同事摁着头p。只要写代码就会出现bug，是我对自己代码能力的不自信，是我在写代码的时候无法保证百分百正确。\n元认知，是对自己的思考过程进行认知和理解，其实就是反思能力。\n意识到自己在想什么，纠正不明智的想法。\n想象一个灵魂伴侣，时刻从未来、过去、全局、底层 看待自己\n可以通过注意 注意力 的方法来提高元认知能力。\n对 模糊 零容忍\n11.21 幸运时懂得感恩，苦涩时保持风度 “我不是一个合格的实习生”，所有朋友都没有反对，虽然我尽力在合格。\n不要祈求从任何人身上得到安慰或劝诫，对方没必要去迎合你说一些让你开心的话。而真相也不藏在别人的嘴里，不用急着去狡辩什么，因为大家只看结果。\n看不到未来，一手好牌被我自己打的稀烂，大概率还是回去考研。自己其实也不想继续实习，但是路该往哪走呢。回家了倒还好啦，还是去考研，好不甘心呐。\n发现每次遇到挫折我都会这么想，不过还好有再站起来的勇气。\n专注于自己的目标，不要受外界干扰。道理总是说出来轻而易举。\n从未来回看今天，或许这是我迷茫未来最普通最平凡的一天。但我很狼狈。\n确定了12.30 last day。不得不说大厂管理层的技术开发，说话也是滴水不漏。有些难受，又觉得是个解脱，在字节这五六个月我并不快乐，终于可以摆脱了。\n我们常常把眼下的生活视为过渡，这些日子或忙碌或痛苦，我们把它视为从此岸通往彼岸的桥梁，但绝不是我们认可的生活本身，持着这样的心情，过去人生的每一段时光，我们并不真正身处于当下，而是生活在未来，我们觉得等到某个时间点，理想的生活就会开始，但正是因为这种轻视，我们少有真正快乐且充实的拥有过人生的黄金阶段，你要知道，人生的每一个阶段，都有相应的只多不少的问题需要解决，你要学会面对冲突和接受自己的无能为力，当未来成为现在你生活的内核，并没有什么不同，总有一些阻碍阻拦着我们，总有些事要先解决，有些工作要做完，我们总觉得只有把这些都完成了，我们的生活才会开始，直到最后我们终于明白，这些障碍正是我们的生活本身。\n11.26 意识到没有复盘总结的习惯 起因是在看这个文档。发现从来没有问过自己，入职五个月了， 为什么现在还没办法扛起一个模块？\n信任。\n之前没有实习经历，因此刚来时没有把重点放在对部门业务和公司架构的熟悉上，而是放在了赶快提交一个代码上。**战术的勤奋掩盖了战略的懒惰。**导致在不熟悉业务逻辑、没有对影响考虑周到、甚至不知道怎么做的时候，就开始急于开发。出了很多问题，也问了很多弱智问题，完全是同事在带着开发，失去了最初的信任。\n信任建立过程仍然在犯错。没办法保证错误的减少，在开发时没有细问自己为什么，因此还是会犯一些不熟悉自己写的代码、不知道怎么部署agw等的低级错误。\n同时，也不信任自己。虽然给了我一个模块，但是我觉得自己不可以，内心还需要别人的帮扶。包括在真正实践的时候，很多东西我也没有考虑到，我甚至都没有想到。\n那么，目前还有什么不足的地方呢？\n技术的深度和宽度。不会想那么多，也不会想那么深。一方面是因为实践经验在这里，没有接触到足够的开发场景；另一方面是复盘的总结没有到位，遇到问题思考并不深入，没有真正把自己代入到代码的第一责任人，只想着能跑就行，没想着优雅，也没想着以后怎么办，会不会出事。复盘不频繁，文档不清晰，也没有后续常看的习惯。\n12.5 懒惰 居家三周后，我的习惯越来越差。无法集中思维，忍不住刷抖音，度过一天无所得，甚至基本的开发任务也无法完成。专注几分钟就让自己沉醉在无营养的视频中。\n还记得居家第一周的时候我可以自豪地说我从中午到晚上一直高效率工作，现在只想着躺，想着玩，玩又无法尽兴，担忧未来，焦虑现状。\n自律性是一方面，另一方面又觉得太疲惫了，快过年却仍0offer，觉得没办法挣脱这泥沼，觉得就这样吧。\n但又不甘心这样，否则不会痛苦的一句又一句。\n想明白道理很简单，15s的抖音视频毫无营养，纯打发时间，纯解脱自己，无聊，可是好像沉醉在这之中才可以逃避现实。但现实又无法被逃避，自己也无法被解脱，对现状毫无影响，甚至更遭。\ntodo蛮多的，准备面试的八股或算法，看一看csapp的课程。但是时间总在偷偷溜，而我又任凭时间偷偷溜。\n晚上洗个澡清醒一下吧。（其实最后也没洗\n12.13 又挨了一顿骂 这顿骂的原因很简单：一个本来两三天的需求开发了两周。我不想再找借口了，因为本来这个需求就是给我一个人own的，我又一次打破了信任机制。\n我当然不是一个特别优秀的人，但是这一路走来，我在群体中都是闪耀、比较领先的存在。刚到字节的时候我觉得我也会是一个出色的实习生，但是不是，新人大作业做了整整一个月，每次mr都会有一大堆低级错误，小组一直不给核心需求。那些自我安慰在与同时入职的校招生的对比下显得更加不堪一击，那些我嗤之以鼻的研究生学历好像也是我差劲的原因。\n为什么呢？为什么在字节实习会这么糟糕呢？\n自身原因：自身的实践能力没有打上去。其实作为一名字节跳动的员工我的代码能力并不够格，也无法在短期内提升许多，我的软素质能力比起来也不优秀。只是运气够好，小聪明够多。\n大环境原因：进入字节后我才发现，原来优秀的人可以这么优秀。他们可以在大学的时候就已经写了很多成熟的代码，研究生去的是我根本都不敢想的学校，随随便便的博客里面每句话都承载着太多的思考和认知\u0026hellip;字节跳动的大部分人，特别是番茄小说的大部分人，学历都是极其厉害的，家庭教育、阅历、知识积累和我根本不在一个level,所以他们能理所应当的说“你怎么会犯这种错误”。我不认同学历好的一定比学历差的优秀，但是在同条件下，我真的差了太多太多。\n马上就要离职了，我太想做好了，太想让我的同事觉得“铪，这个实习生其实也不错”。但是还是有那么多的问题存在。\n复盘要有细节和规避机制.按表写就可以了\n探索分析能力建立. 去关注业务和技术之间的转换. 去学习别人是怎么把业务转换成技术方案. 怎么去实现的. 学套路.\n","permalink":"https://zerlina-ysl.github.io/posts/diary/intern/","summary":"以下是实习时的碎碎念，包括知道自己不能转正的失望沮丧、在北京一个人的孤单难过和对未来的一些迷茫，现在读起来很幼稚，但是不舍得删，之前在飞书文档里记录着，现在转载到这里 关于面试10.28 遇到好的面试官/面试官问到好的问题，真的是感觉这几十分钟值得了，哪怕面试没过也值得了。好的问题就","title":"2022-06-26-2022-12-31 实习日记"},{"content":"5.4 如何建立个人认知体系 1. 关键语句摘抄 知识和认知是不同的。并不是说实用的知识才是知识，而是在说，只有当知识能帮助你做实际决策的时候，它才是你的知识。 个人成长的目的不是理解和知道，而是判断和选择。 在阅读时，我唯一要做的事情就是：寻找触动点。我会在触动的地方做标记，在空白处写下大量能联想到的思考。书读完之后，我会放上几天，然后问自己，“这本书最触动自己的是哪个点？”这个点可以是一个理论、一个案例、甚至是一句话，只要它真正触动我，并能让我发生真实的改变，我就觉得这本书超值了，至于其他，忘记就忘记了，我一点也不觉得可惜。而作者的知识体系与框架，又与我何干呢？ 人的能力是无法跳跃发展的，只能在现有基础上一点一点向外扩展，而扩展的最佳区域就在舒适区边缘。处于认知圈边缘的知识与我们的实际需求贴合得最紧密，因此也更容易让我们产生触动，进而与现有的知识进行关联。 触动碎片能够愈自身紧密结合，慢慢变成自己的一部分，最终织出一张属于自己的认知网络。 体系的本质就是用独特的视角讲一些零散的、独立的知识、概念或观点整合为应对这个世界的方法和技巧。 认知 知识 伪触动 触动点\n2. 个人感触 突然阅读这本书，是因为某天下午的迷茫。没有工作、学历不算优秀、实践能力差…各种因素堆加在一起，突然觉得自己不知道该怎么做了。 我去找了我哥聊了聊，我哥告诉我。 当然我现在对于未来仍然没有一个确定性的回答，我始终迷茫着。但是我好像心里有了一点数。\n“找不到工作，我的未来该怎么办？”，这是一个问题。\n“如何提高自己的代码能力，确保自己在学历不算出彩的前提下获得能力出色的评价”，这也是一个问题。\n这两个问题是我当前面对并无法解决的，我无法从与我经历不同的人身上找出一个通用的答案，这个答案只有我自己能给我自己，而我如何去解答？这就是认知能力。\n没有筛选性的读工具书是无用的，不过可以助眠。如果没有一个亟待解决或极其感兴趣的问题，再有意义的语句也只不过是隔山打牛。关键在于触动。\n而这个触动正如当前，我的需求和我的问题结合在一起，所以相关性的指导就可以触动我，我将其转换为自己的想法，就是扩展认知体系的过程。\n所以停止读那些根本读不下去的书，或在阅读前翻一翻目录去了解是否有感兴趣的专题，否则所谓的阅读只是在浪费时间的时候给自己心理安慰。\n当我不知道如何解决问题的时候，其实就是无法运用自己当前的知识，可能是我掌握的知识不够多，也可能是我的运用、反思不够多而出现了伪知识。\n","permalink":"https://zerlina-ysl.github.io/posts/read/cognitive_awakening5.4/","summary":"5.4 如何建立个人认知体系 1. 关键语句摘抄 知识和认知是不同的。并不是说实用的知识才是知识，而是在说，只有当知识能帮助你做实际决策的时候，它才是你的知识。 个人成长的目的不是理解和知道，而是判断和选择。 在阅读时，我唯一要做的事情就是：寻找触动点。我会在触动的地方做标记，在空白处写下大量能联","title":"认知觉醒"},{"content":"自动化流水线如何构建项目并运行？\nDevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。\nSourceControlManagement 代码发布管理平台 拉取源代码，运行指定的build脚本(如 sh build.sh），将打包后的output目录下的内容打包成tar包并上传，生成可以在线上运行的代码或资源。\nCloudEngine云引擎 容器发布和管理平台，基于k8s。 到scm仓库拉取tar的压缩包，根据配置生成用于构建的dockerFile，构建docker镜像,挂在宿主机上，启动服务，为服务创建唯一标识（psm)进行后续的管理。部署时通过k8s调度到某个node的pod，下载服务镜像。\nTCE将一些物理服务器资源合并成一个集群，再将集群拆分为更细粒度的计算资源，从而实现对计算资源更灵活的调度和分配。\n集群中多实例部署，每个实例只需要负责一部分的请求流量。多实例也可以实现容灾和滚动升级。\n可以通过实例 ip+port的方法访问所部署的服务，也可以使用psm，即每个实例启动，会向注册中心报告自己的psm和ip，这样下游服务就可以访问注册中心来获得对应psm的实例列表。\nApiManament 管理服务接口,集成了测试、抓包、mock测试等功能。\nApiGeteWay 以API为核心，提供流量调度、限流、降级、服务治理等全套解决方案能力的网关平台。 AGW将http协议转换为thrift协议，把http请求转换为kitex请求。所以也需要在idl文件中根据idl语法进行标注。\n分布式AGW 网关以独立的进程部署在业务实例中，流量-\u0026gt;TLB-\u0026gt;业务集群，通过网关转发到业务实例。流量路径中少一跳，整体时延收益明显。同时，分布式网关以sidecar模式独立进程部署在业务实例中，业务PSM天然隔离，隔离性和稳定性更好。 分布式AGW不支持跨机房流量调度、分流能力，比较依赖tlb的分流能力；不支持请求合并。\n中心化AGW 流量路径从TLB–\u0026gt;网关集群–\u0026gt;业务集群。优势在于AGW集群作为集中到网关节点，拥有灵活的流量调度能力，如集群分流、机房调度等。\n网关逻辑的更改发布一旦有问题，会影响所有业务。\n从网关能力演进的角度来看，分布式网关是未来的趋势。API Gateway Mesh逐渐成为主流。\nLoadBalance 管理服务域名流量入口的七层负载均衡服务。\n用户可以在TLB平台为自己的服务配置对外的域名从而完成流量接入。支持对域名进行匹配，如正则匹配、自定义匹配等，将访问域名的流量通过不同路由分发到对应的后端psm服务。\n参考 相爱相杀：Servicemesh和API Gateway关系深度探讨：https://skyao.io/post/202004-servicemesh-and-api-gateway/\n蚂蚁金服 API Gateway Mesh 思考与实践：https://www.infoq.cn/article/azCFGyTDGakZqaLEEDMN\n","permalink":"https://zerlina-ysl.github.io/posts/blog/how_bytecycle_run/","summary":"自动化流水线如何构建项目并运行？ DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地","title":"自动化流水线如何构建项目"},{"content":"是什么？ 微服务以专注于单一责任与功能的小型功能区块为基础，利用模块化组合出复杂的大型应用程序，各区块可以使用与语言无关的api相互通讯。 服务框架的构建是一个持续演进的过程。\n单体架构 最初的服务，如实现一个小说app，我们会把所有的功能都实现在一个程序，将各种功能按照高内聚低耦合的理念划分成多个模块(书成模块、登陆模块、书架模块等等…)。一个服务就是一个应用。\n随着访问量增多，服务器压力变大，为了支持业务发展，首先选择了最直接的方法—加机器。\n因此需要负载均衡来支持流量增长。所有的请求需要通过一层负载均衡，再打到最终的服务上。\n但随着业务的发展、产品的迭代，单体架构的缺陷愈发明显：\n所有功能高度耦合，互相影响，难以管理，团队合作受限 部分的逻辑修改也需要对整体服务进行开发和测试，采用瀑布式开发模型，开发周期长迭代慢。且需要影响全部服务的重建和部署，成本高 一个小bug可能会导致整个系统的崩溃\n因此，需要对单体架构进行解耦！ 面向服务 借助单体架构的功能划分，将单体架构划分为几个大的服务应用。 每个服务应用内部通过负载均衡横向扩展。 拆分后的每个服务应用创建自己的接口定义，以便被其他服务发现 服务之间的通讯类似于计租中的总线原理：通过一个独立的中间件提供消息通讯\n以上是简易版企业服务总线的初步设计，系统的所有流量通过通信总线进行路由分发。但随着流量的激增，通信总线会出现问题，通信总线成为了整个系统的中心化节点和瓶颈，影响了系统的扩展性和稳定性。 SOA 去中心化。\n对于通信总线分发流量而导致的问题，使用DNS+IP网络架构解决。\n域名：为每个服务定义一个psm(product.subsystem.module)作为服务的域名 IP：服务实例其实就是一个机器终端，拥有自己的ip地址 根服务器： 维护psm-\u0026gt;ip的映射，实现服务发现 服务注册：每个服务实例在创建后不断的向注册中心上报自己的地址(psm-ip)和实例状态 服务治理：注册中心维护着每个服务对应的实例地址列表及其健康状态 服务发现：实例定时向注册中心获取要访问的服务的实例地址，访问时通过负载均衡选择其中一个p2p来访问，流量不经由注册中心转发。负载均衡通过服务本身来实现。 通信协议：服务提供IDL文件，通过统一的rpc进行通信。 引入gateway将外部流量转换为内部请求。注册中心可以多实例部署，集群内部使用分布式算法保证其最终一致性。可以对服务进行更细粒度的拆分。\n至此，完成了微服务架构的设计：通过注册中心进行服务治理，使用一个rpc框架在实现服务注册、服务发现、负载均衡、熔断等功能。\n所谓云原生 云原生利用和发挥云平台的弹性和分布式优势，在云上构建和运行应用程序。\n2013年，docker横空出世，与微服务架构理念一拍即可。\n轻量级容器 统一的运行环境 快速部署 使用k8s进行容器编排，支持容器等快速部署和资源调度。\n虽然已经解决了单体架构很多问题，但是仍存在些问题：\n微服务框架向业务程序注入了许多与业务无关的代码，服务内部可能有许多微服务框架相关的并发线程，业务侵入性强。且开发语言的不统一也会给整个基础模块的维护和迭代带来巨大成本。\n解耦。从高内聚低耦合的原则出发，将与业务无关的逻辑从框架代码中抽出，以代理的模式作为业务程序的基础服务存在，服务可以更专注于业务逻辑。作为配合，保留一个轻量级框架作为业务应用和框架代理之间沟通的中间层。即sidecar。这部分程序的升级发布，除非是与rpc编解码相关，否则不需要业务代码任何变更，实现基础服务与业务服务的解耦。伴生容器会接管业务服务的所有对外流量进行处理和分发，业务服务对此无感知。\n更进一步，需要通过这一层sidecar对调用进行超时配置、接口监控、流量控制、权限控制等操作，会使用一个控制0中心为我们提供配置的能力，称为control plane。抽取的这一层sidecar模式部署的伴生容器部分，称为data plane(proxy、gateway)\n以上其实就是service mesh的设计。 FAQ 提出好的问题最重要\n问题1： 对于通信总线去中心化的这一步中，去中心化该怎么样理解？\n即不是所有的流量经过通信总线，对于注册中心可以多实例部署，并不依赖一个实例。\n追问： 但是注册中心中，流量也需要经过注册，否则如何拿到ip和其他注册信息哇？\n只需要定时去拉注册中心中的数据即可，拉取列表后数据就会存在于本地。\n追问： 注册中心可以部署多个实例，那通信总线可以吗？\n可以部署多个通信总线，但是所有流量还会经过通信总线。\n问题2：现在的sidecar是把agent打到业务的镜像中，是出于什么目的？一般sidecar会单独存在一个容器，业务程序所在容器和sidecar的容器进行跨容器通信。 公司主要有两个平台提供sidecar机制。servicemesh和tce sidecar。tce sidecar相当于是独立的容器，servicemesh是伴生容器，两个进程都运行在一个容器上。\n追问：公司主推的是伴生容器吗？\n他们的应用场景不同。sidecar是有sdk的维护，servicemesh将library移动到外部作为独立进程存在，希望在服务独立的同时保持相同的迭代节奏。tce sidecar只需要把k8s一个pod内启动多个紧密耦合共享资源的共处容器的能力封装出来提供给用户。\n问题3： 现在这套方式还存在什么缺点吗？\n服务过多，会有一些开销是用在rpc调用和不同服务之间的数据pack，需要尝试把服务部署到同一个集群来优化。从这个角度来讲，有没有可能有一些动态化组件，如faas，现在的faas更多用在消息的消费上，假设接口放在faas上，在调用接口时将函数拉到本地，使用动态组装可以避免跨网络的调用。\n","permalink":"https://zerlina-ysl.github.io/posts/blog/microservice/","summary":"是什么？ 微服务以专注于单一责任与功能的小型功能区块为基础，利用模块化组合出复杂的大型应用程序，各区块可以使用与语言无关的api相互通讯。 服务框架的构建是一个持续演进的过程。 单体架构 最初的服务，如实现一个小说app，我们会把所有的功能都实现在一个程序，将各种功能按照高内聚低耦合的理","title":"浅谈微服务架构"},{"content":"apt的工作原理 Ubuntu采用集中式的软件仓库机制，将各式各样的软件包分门别类地存放在软件仓库中，进行有效地组织和管理。然后，将软件仓库置于许许多多的镜像服务器中，并保持基本一致。这样，所有的Ubuntu用户随时都能获得最新版本的安装软件包。因此，对于用户，这些镜像服务器就是他们的软件源（Reposity）。\n然而，由于每位用户所处的网络环境不同，不可能随意地访问各镜像站点。为了能够有选择地访问，在Ubuntu系统中，使用软件源配置文件/etc/apt/sources.list列出最合适访问的镜像站点地址。\n执行apt-get update ，程序分析/etc/apt/sources.list，自动连网寻找list中对应的Packages/Sources/Release列表文件，如果有更新则下载之，存入/var/lib/apt/lists/目录\n然后 apt-get install 相应的包 ，下载并安装。\n使用“apt-get install”下载软件包大体分为4步：第一步，扫描本地存放的软件包更新列表（由“apt-get update”命令刷新更新列表，也就是/var/lib/apt/lists/），找到最新版本的软件包；第二步，进行软件包依赖关系检查，找到支持该软件正常运行的所有软件包；第三步，从软件源所指 的镜像站点中，下载相关软件包；第四步，解压软件包，并自动完成应用程序的安装和配置。\napt-get的软件源配置 有很多的镜像，我使用的是aliyun的软件源，在/etc/apt/sources.list中配置 https://developer.aliyun.com/article/704603\ndeb http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ trusty-backports main restricted universe multiverse apt的代理服务器 可以使用gost工具，mac直接brew install gost。建议在本机自建代理、供虚拟机访问. 在本机（如mbp）启动代理： gost -L \u0026quot;http://:8118/192.168.112.133:8118\u0026quot;-\u0026gt; 在 8118 端口启动一个http代理 建议使用 screen -dmS proxy /path/to/gost -L \u0026quot;http://:8118\u0026quot; 在后台启动代理 放在crontab里效果更佳: */10 * * * * screen -dmS ... 在虚拟机中的~/.bashrc文件中添加 function Proxy() { ip=${SSH_CLIENT/ */} if [ \u0026#34;$1\u0026#34; == \u0026#34;on\u0026#34; ]; then export https_proxy=$ip:8118 export http_proxy=$ip:8118 echo Proxy On else unset https_proxy unset http_proxy echo Proxy Off fi } $SSH_CLIENT 是一个环境变量，存的是提供代理的ip地址，在这里就是mbp的ip地址。如ip=192.168.0.101。 使用source ~/.bashrc 保存配置文件。 使用Proxy on打开代理。 3. 在虚拟机的/etc/apt/apt.conf中添加配置\nAcquire::http::Proxy \u0026#34;http://192.168.0.101:8118\u0026#34;; Acquire::https::Proxy \u0026#34;http://192.168.0.101:8118\u0026#34;; ","permalink":"https://zerlina-ysl.github.io/posts/blog/ubuntu_conf/","summary":"apt的工作原理 Ubuntu采用集中式的软件仓库机制，将各式各样的软件包分门别类地存放在软件仓库中，进行有效地组织和管理。然后，将软件仓库置于许许多多的镜像服务器中，并保持基本一致。这样，所有的Ubuntu用户随时都能获得最新版本的安装软件包。因此，对于用户，这些镜像服务器就是他","title":"ubuntu的apt-get镜像配置"},{"content":"每当深夜的时候做网站的想法就愈加强烈，所以还是趁热打铁。\n叫我小李就好了，正在努力秋招。\n不过这都不重要，给大家看我的猫猫。\n特别感谢： https://www.sulvblog.cn/posts/blog/build_hugo/\n","permalink":"https://zerlina-ysl.github.io/about/","summary":"每当深夜的时候做网站的想法就愈加强烈，所以还是趁热打铁。 叫我小李就好了，正在努力秋招。 不过这都不重要，给大家看我的猫猫。 特别感谢： https://www.sulvblog.cn/posts/blog/build_hugo/","title":"🙋about me"}]